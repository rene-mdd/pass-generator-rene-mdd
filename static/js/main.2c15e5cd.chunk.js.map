{"version":3,"sources":["component/PassGenerator.js","App.js","serviceWorker.js","index.js"],"names":["PassGenerator","props","state","randomValue","characters","mixed","special","generator","bind","sendFunc","checker1","checker2","filtered","r","e","defaultCharAllowed","mixedCase","toLocaleUpperCase","mixedAndSpecialCase","total","allowed","this","i","split","Math","floor","random","length","setState","parseInt","target","value","event","preventDefault","className","onSubmit","handleSubmit","type","disabled","onClick","name","onChange","map","item","htmlFor","checked","React","Component","App","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAqGeA,E,kDAlGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IACnDC,OAAO,EACPC,SAAS,GAGb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAEhB,EAAKI,SAAW,EAAKA,SACrB,EAAKC,EAAI,EAAKA,EAfC,E,sDAoBTC,GAEN,IAAIC,EAAqB,6BAErBC,EAAYD,EAAqBA,EAAmBE,oBACpDC,EAAsBF,EAFJ,yBAGlBG,EAAQ,GACRC,EAAU,GACVC,KAAKnB,MAAMG,OAA+B,GAAtBgB,KAAKnB,MAAMI,QAAoBc,GAAWJ,EACxDK,KAAKnB,MAAMI,SAAYe,KAAKnB,MAAMG,MACnCgB,KAAKnB,MAAMI,UAAYe,KAAKnB,MAAMG,MAAQe,GAAWL,GAPxC,yBAQdM,KAAKnB,MAAMI,SAAWe,KAAKnB,MAAMG,QAAOe,GAAWF,GAFNE,GAAWL,EAIhE,IAAK,IAAIO,EAAI,EAAGA,EAAC,YAAOD,KAAKnB,MAAME,YAAakB,IAAK,CAEnDH,GAD0BC,EAAQG,MAAM,IAAIC,KAAKC,MAAMD,KAAKE,SAAWN,EAAQO,SAKjFN,KAAKO,SAAS,CACVzB,YAAagB,EACbf,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,Q,+BAMlDU,GACLO,KAAKO,SAAS,CAAExB,WAAY,CAACyB,SAASf,EAAEgB,OAAOC,Y,iCAM/CV,KAAKO,SAAS,CAAEvB,OAAQgB,KAAKnB,MAAMG,U,+BAE9BS,GACLO,KAAKO,SAAS,CAAEtB,SAAUe,KAAKnB,MAAMI,Y,mCAE5B0B,GACTA,EAAMC,mB,+BAMN,OACI,yBAAKC,UAAU,QACX,iDACA,0BAAMC,SAAUd,KAAKe,cACjB,yBAAKF,UAAU,WACf,yCACW,6BAAK,2BAAOG,KAAK,OAAON,MAAOV,KAAKnB,MAAMC,YAAamC,UAAQ,KAE1E,4BAAQC,QAASlB,KAAKd,WAAtB,gBACA,0CACA,2BAAO2B,UAAU,YAAjB,mBAA4C,6BACpC,4BAAQM,KAAK,WAAWC,SAAUpB,KAAKZ,UACtCY,KAAKnB,MAAME,WAAWsC,KAAI,SAACC,GACxB,OAAO,4BAAQZ,MAAOY,GAAOA,QAKzC,2BAAOC,QAAQ,SAAf,mBACA,2BAAOH,SAAUpB,KAAKX,SAAU2B,KAAK,WAAWN,MAAM,QAAQS,KAAK,QAAQK,QAASxB,KAAKnB,MAAMG,QAE/F,2BAAOuC,QAAQ,WAAf,0BACA,2BAAOH,SAAUpB,KAAKV,SAAU0B,KAAK,WAAWN,MAAM,UAAUS,KAAK,UAAUK,QAASxB,KAAKnB,MAAMI,iB,GAzF3FwC,IAAMC,W,MCUnBC,MARf,WACE,OACE,yBAAKd,UAAU,OACd,kBAAC,EAAD,CAAee,MAAO,UCKPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2c15e5cd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass PassGenerator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomValue: \"\",\r\n            characters: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\r\n            mixed: true,\r\n            special: false\r\n        }\r\n        // this.onSubmit = this.onSubmit.bind(this);\r\n        this.generator = this.generator.bind(this);\r\n        this.sendFunc = this.sendFunc.bind(this);\r\n        this.checker1 = this.checker1.bind(this);\r\n        this.checker2 = this.checker2.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.filtered = this.filtered;\r\n        this.r = this.r;\r\n    }\r\n\r\n\r\n\r\n    generator(e) {\r\n \r\n        let defaultCharAllowed = \"abcdefghijklmnopqrstuvwxyz\";\r\n        let defaultSpecChar = \"@%+/'!#$^?:,(){}[]~-_.\";\r\n        let mixedCase = defaultCharAllowed + defaultCharAllowed.toLocaleUpperCase();\r\n        let mixedAndSpecialCase = mixedCase + defaultSpecChar;\r\n        let total = \"\";\r\n        let allowed = \"\";\r\n        if (this.state.mixed && this.state.special == false) { allowed += mixedCase }\r\n        else if (!this.state.special && !this.state.mixed) { allowed += defaultCharAllowed }\r\n        else if (this.state.special && !this.state.mixed) {allowed += defaultCharAllowed += defaultSpecChar}\r\n        else if(this.state.special && this.state.mixed){allowed += mixedAndSpecialCase}\r\n     \r\n        for (let i = 0; i < [...this.state.characters]; i++) {\r\n            let randomStringValue = allowed.split('')[Math.floor(Math.random() * allowed.length)]\r\n          total += randomStringValue;\r\n      \r\n        }\r\n      \r\n        this.setState({\r\n            randomValue: total,\r\n            characters: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n        })\r\n\r\n      \r\n    }\r\n\r\n    sendFunc(e) {\r\n        this.setState({ characters: [parseInt(e.target.value)] })\r\n       \r\n    }\r\n\r\n    checker1() {\r\n\r\n        this.setState({ mixed: !this.state.mixed })\r\n    }\r\n    checker2(e) {\r\n        this.setState({ special: !this.state.special })\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // Do stuff\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <h1>Generate password</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"formBox\">\r\n                    <label>\r\n                        Result <br/><input type='text' value={this.state.randomValue} disabled />\r\n                    </label>\r\n                    <button onClick={this.generator}>New password</button>\r\n                    <span>Settings</span>\r\n                    <label className=\"dropdown\">Password length <br/>\r\n                            <select name='dropdown' onChange={this.sendFunc}>\r\n                            {this.state.characters.map((item) => {\r\n                                return <option value={item}>{item}</option>\r\n                            })}\r\n                        </select>\r\n\r\n                    </label>\r\n                    <label htmlFor=\"mixed\">Use mixed case </label>\r\n                    <input onChange={this.checker1} type=\"checkbox\" value=\"mixed\" name=\"mixed\" checked={this.state.mixed} />\r\n\r\n                    <label htmlFor=\"special\">Use special characters</label>\r\n                    <input onChange={this.checker2} type=\"checkbox\" value=\"special\" name=\"special\" checked={this.state.special} />\r\n                    </div>\r\n                </form>\r\n          \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PassGenerator;","import React from 'react';\r\nimport PassGenerator from './component/PassGenerator'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <PassGenerator title={'Wea'} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}